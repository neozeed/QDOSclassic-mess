	INCLUDE	'DEV_ASM_QDOS_DEFINES_inc'
	INCLUDE	'CLSC_SRC_CORE_CLK_inc'

	SECTION	CLK

	XDEF	L040F6,MULT

	XREF	HW_RESET,HW_ENABLE
	XREF	RD_CLK,WR_CLK
	XREF	XINT_SERver

	XREF	HW_VCTR_BEG
	XREF.S	HW_VCTR.LEN

	XREF.L	HARDTAG

; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; CLK_asm - QDOS classic Clock routines
;	 - originated July 98 - Mark Swift
;	 - last modified 11/08/99 (MSW)

; The necessary clock related sources, required to
; implement QDOS clock routines on QDOS classic

VERSTAG	EQU	'1.21'
THNGTAG	EQU	'aCLK'

; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;  ROM header

BASE:
	dc.l	$4AFB0001	; ROM recognition code
	dc.w	0
	dc.w	ROM_START-BASE

	dc.b	0,25
	dc.l	HARDTAG
	dc.b	'CLOCK routines  '
	dc.l	VERSTAG
	dc.b	$A,0

; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;  start of ROM code

ROM_START:

; --------------------------------------------------------------
;  enter supervisor mode and disable interrupts

	trap	#0
	ori.w	#$0700,sr	; disable interrupts

; --------------------------------------------------------------
;  save register entry values

	movem.l	d0-d3/d6-d7/a0-a4/a6,-(a7)

; --------------------------------------------------------------
;  initialise hardware

	bsr	HW_RESET

; --------------------------------------------------------------
;  allocate a THING entry for local variables

	move.l	a7,d0
	andi.l	#$FFFF8000,d0
	move.l	d0,a6		; address of system vars

	bsr.s	MAKE_THG 	; a3 now points to vars
	bne.s	ROM_EXIT

; --------------------------------------------------------------
;  disable caches on '020 and above

	bsr	CACHOFF		; disable caches
	move.l	d0,d7		; save cacr value

; --------------------------------------------------------------
;  get address of system vectors

	suba.l	a0,a0		; a handy reference point

	tst.b	161(a6)
	beq.s	NOVBR

	dc.w	$4E7A,$8801	; movec vbr,a0 (010+)

NOVBR:

; --------------------------------------------------------------
;  Copy custom vector routines into THING

	move.l	#VCTR.LEN+HW_VCTR.LEN,d2	; will always be multiple of 4
	lsr.w	#2,d2
	subq.w	#1,d2
	lea	VCTR_BEG(pc),a2
	lea	THNG.VCTR(a3),a4

CPY_VCTR:
	move.l	(a2)+,(a4)+
	dbra	d2,CPY_VCTR

; --------------------------------------------------------------
;  Redirect TRAP 1 routine

	move.l	$84(a0),THNG.VCTR+VCTR.TRP1_OLD(a3) ; save old address

	lea	THNG.VCTR+VCTR.TRP1_NEW(a3),a1
	move.l	a1,$84(a0)			; redirect TRAP 1

; --------------------------------------------------------------
;  Redirect RESET routine

	move.l	$04(a0),THNG.VCTR+VCTR.RSET_OLD(a3) ; save old address

	lea	THNG.VCTR+VCTR.RSET_NEW(a3),a1
	move.l	a1,$04(a0)			; redirect RESET

; -------------------------------------------------------------
; link in external interrupt routine

	lea	XINT_SERver(pc),a1 ; address of routine
	lea	SV_LXINT(a3),a0
	move.l	a1,4(a0)
	moveq	#MT.LXINT,d0
	trap	#1

; --------------------------------------------------------------
;  initialise relevant hardware

	bsr	HW_ENABLE

; --------------------------------------------------------------
;  restore caches

	move.l	d7,d0
	bsr.s	SETCACH

; --------------------------------------------------------------
;  restore register entry values

ROM_EXIT:
	movem.l	(a7)+,d0-d3/d6-d7/a0-a4/a6

;  enable interrupts and re-enter user mode

	andi.w	#$D8FF,sr
	rts

*******************************************************************
*
*  make 'THING' for me
*
*  enter a6 = system variables
*  exit	a3 = address of your private variables
*
*  corrupts = d0,d2,a1 - etc...
*
*  11/08/99 Make the THING but do not add it to the THING list.
*	   We will thus keep it private.

MAKE_THG:
;	 lea	 SV_THINGL(a6),a3  ; start of THING list
;
;NEXT_THG:
;	 move.l	 (a3),d0
;	 beq.s	 ALOC_THG
;
;	 move.l	 d0,a3
;
;	 cmp.w	 #4,$2A(a3)
;	 bne.s	 NEXT_THG
;
;	 cmp.l	 #THNGTAG,$2C(a3)
;	 bne.s	 NEXT_THG
;
;	 bra.s	 OKAY_THG
;
ALOC_THG:
	moveq	#0,d2		; owner is superBASIC
	move.l	#$38+VAR.LEN+VCTR.LEN+HW_VCTR.LEN,d1  ; length
	moveq	#MT.ALCHP,d0
	trap	#1		; allocate space

	tst.l	d0
	bne.s	EXIT_THG 	; exit if error

	move.l	a0,a3

INIT_THG:
	move.l	#VERSTAG,$26(a3)	; version number
	move.w	#4,$2A(a3)	; name length
	move.l	#THNGTAG,$2C(a3)	; name
	move.l	#'THG%',$30(a3)	; thing variables follow
	move.l	#2,$34(a3)	; freeform shared code

	lea	$30(a3),a1	; ptr to thing data area
	move.l	a1,$10(a3)	; store ptr to variables

;	 lea	 SV_THINGL(a6),a1
;	 move.l	 (a1),(a3)	 ; extend thing list
;	 move.l	 a3,(a1) 	 ; put THIS thing at start

OKAY_THG:
	move.l	$10(a3),a3	; address of data area
	addq.l	#8,a3		; return with a3 pointing
				; to first variable

EXIT_THG:
	tst.l	d0
	rts

*******************************************************************
*
* routine to disable the instruction & data caches
* Exit:	d0 = previous CACR value
*
CACHOFF:
	move.l	d1,-(a7)

	moveq	#0,d0
	moveq	#-1,d1
	bsr.s	DOCACH

	move.l	(a7)+,d1
	rts

*******************************************************************
*
* routine to set the CACR
* Entry: d0 = value to write to CACR
* Exit:	d0 = previous CACR value
*
SETCACH:
	move.l	d1,-(a7)

	moveq	#-1,d1
	bsr.s	DOCACH

	move.l	(a7)+,d1
	rts

*******************************************************************
*
* routine to alter the state of the CACR
* callable from user or supervisor modes
* Entry: d0 = bits to set
*	d1 = bits to clear/alter
* Exit:	d0 = previous CACR value
*
DOCACH:
	movem.l	d2/a0/a6,-(a7)
	movea.l	a7,a0
	trap	#0
	move.w	sr,-(a7)
	ori.w	#$0700,sr	interrupts off

	subq.l	#2,a0
	cmpa.l	a0,a7
	beq.s	DOCACHSV 	entered routine as supervisor

	bclr	#5,0(a7) 	otherwise sr on exit = user mode

DOCACHSV:
	move.l	a7,d2		Calculate start of
	andi.w	#-$8000,d2	system variables
	move.l	d2,a6

	and.l	d1,d0
	not.l	d1

	cmpi.b	#$10,$A1(a6)
	bls.s	DOCACHX		exit if 010 or less

	dc.w	$4E7A,$2002	movec	cacr,d2
	and.l	d2,d1		mask off changed bits
	or.l	d0,d1		or in set bits

	move.l	d2,d0		store old cacr value

	ori.w	#$0808,d1	always clear caches on 020/030

	cmpi.b	#$30,$A1(a6)
	bls.s	DOCACHSET

	tst.w	d0		check 040 bits
	bpl.s	DOCACHDCHK	branch if instruction cache off
	dc.w	$F4B8		cpusha	ic
				; otherwise update memory from cache

DOCACHDCHK:
	tst.l	d0		check 040 bits
	bpl.s	DOCACHDINV	branch if data cache off
	dc.w	$F478		cpusha	dc
				; otherwise update memory from cache

	tst.l	d1		check 040 bits
	bmi.s	DOCACHIINV	branch if leaving data cache on

DOCACHDINV:
	dc.w	$F458		cinva	dc
				; invalidate cache

DOCACHIINV:
	dc.w	$F498		cinva	ic
				; invalidate cache

DOCACHSET:
	dc.w	$4E7B,$1002	movec	d1,cacr
				; set the cache

DOCACHX:
	move.w	(a7)+,sr
	movem.l	(a7)+,d2/a0/a6
	rts

*******************************************************************
*
* Pad out to long words

NOPpad1:
	DCB.w ((0-(NOPpad1-BASE))&$3)/2,$4E71

*******************************************************************
*
* Begin custom vector routines

VCTR_BEG:

*******************************************************************
*
*  Custom TRAP 1 routine to handle calls to:
*  MT_RCLCK (d0=$13), MT_SCLCK (d0=$14), MT_ACLCK (d0=$15)

TRP1:

VCTR.TRP1_NEW EQU TRP1-VCTR_BEG

	cmp.b	#MT.RCLCK,d0
	beq.s	MT_RCLCK

	cmp.b	#MT.SCLCK,d0
	beq.s	MT_SCLCK

	cmp.b	#MT.ACLCK,d0
	beq.s	MT_ACLCK

; --------------------------------------------------------------
;  Call old TRAP #1 routine

TRP1JMP:

VCTR.TRP1_OLD EQU (TRP1JMP-VCTR_BEG)+2

	DC.W	$4EF9,$0000,$0000  ; filled in later

; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; initialise A5 and A6 prior to performing a TRAP routine

INI_A5A6
	SUBQ.L	#8,A7
	MOVE.L	8(A7),-(A7)
	MOVEM.L	D7/A5/A6,4(A7)

	move.l	a7,d7
	andi.l	#$FFFF8000,d7
	move.l	d7,a6		; Calc address of sys vars

	LEA	4(A7),A5 	; A5 points to saved
				; Registers D7,A5,A6
	MOVEQ	#$7F,D7
	AND.L	D7,D0
	RTS

; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;  TRAP #1 with D0=$13
;  implement clock (CIA-A event counter)/50+PC_CLOCK

MT_RCLCK:
	bsr.s	INI_A5A6

	bsr	RD_CLK		; read hardware clock

	moveq	#0,d0		; no errors
	bra.s	TRP1X

; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;  TRAP #1 with D0=$14

MT_SCLCK:
	bsr.s	INI_A5A6

	bsr	WR_CLK		; set hardware clock

	moveq	#0,d0		; no errors
	bra.s	TRP1X

; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;  TRAP #1 with D0=$15

MT_ACLCK:
	bsr.s	INI_A5A6

	move.l	d1,d0
	bsr	RD_CLK		; read hardware clock
	add.l	d0,d1		; adjust increment offset
	bsr	WR_CLK		; set hardware clock

	moveq	#0,d0		; no errors

; --------------------------------------------------------------
;  exit from TRAP call

TRP1X:
	movem.l	(a7)+,d7/a5/a6	; exit from exception
	rte

*******************************************************************
*
*  subroutine to convert QL DATE to year/month/day hr/min/sec
*
*  enter:
*		D1 = DATE (long int)
*
*  exit:
*	 lo word D2 = year
*		D4 = month
*		D1 = day
*	 hi word D2 = hour
*	 lo word D3 = minutes
*	 hi word D3 = seconds
*		D0 = weekday

L040F6:
	MOVE.W	#$3C,D2
	BSR	L0417E
	MOVE.W	D0,D3
	SWAP	D3
	BSR.S	L0417E
	MOVE.W	D0,D3
	DIVU	#$18,D1
	MOVE.L	D1,D2
	ANDI.L	#$FFFF,D1
	MOVE.L	D1,D0
	DIVU	#7,D0
	SWAP	D0
	DIVU	#$05B5,D1
	MOVE.W	D1,D2
	ASL.W	#2,D2
	ADDI.W	#$07A9,D2
	CLR.W	D1
	SWAP	D1
	DIVU	#$016D,D1
	MOVEQ	#0,D4
	CMPI.W	#4,D1
	BNE.S	L0413C
	SUBQ.W	#1,D1
	MOVE.W	#$016D,D4
L0413C	ADD.W	D1,D2
	SWAP	D1
	ADD.W	D4,D1
	MOVEQ	#0,D5
	MOVE.W	D2,D4
	ANDI.W	#3,D4
	BNE.S	L0414E
	MOVEQ	#1,D5
L0414E	MOVE.W	D5,D4
	ADDI.W	#$003A,D4
	CMP.W	D4,D1
	BLE.S	L0415C
	ADDQ.W	#2,D1
	SUB.W	D5,D1
L0415C	MOVE.W	D1,D5
	ADDI.W	#$005C,D5
	MULU	#$0064,D5
	DIVU	#$0BEF,D5
	MOVE.W	D5,D4
	ADDI.W	#$005C,D1
	MULU	#$0BEF,D5
	DIVU	#$0064,D5
	SUB.W	D5,D1
	SUBQ.W	#3,D4
	RTS

L0417E	MOVEQ	#0,D0
	SWAP	D1
	MOVE.W	D1,D0
	DIVU	D2,D0
	SWAP	D0
	MOVE.W	D0,D1
	SWAP	D1
	DIVU	D2,D1
	MOVE.W	D1,D0
	SWAP	D1
	EXG	D0,D1
	RTS

*******************************************************************
*
*  multiply 32 bit d1 by 16 bit d0 (assumes no overflow)

MULT:
	move.l	d1,d2		; make copy

	swap	d1		; multiply high word
	mulu.w	d0,d1
	swap	d1
	clr.w	d1

	mulu.w	d0,d2		; multiply low word

	add.l	d2,d1

	rts

*******************************************************************
*
*  Custom RESET routine to put vectors back as they were

RSET:

VCTR.RSET_NEW EQU RSET-VCTR_BEG

	ori.w	#$0700,sr	; disable further interrupts

	bsr	HW_RESET

	movem.l	d0/a0/a3/a6,-(a7)

	lea	VCTR_BEG-THNG.VCTR(pc),a3

	move.l	a7,d0
	andi.l	#$FFFF8000,d0
	move.l	d0,a6		; address of system vars

;  Put back old vectors

	suba.l	a0,a0		; a handy reference point

	tst.b	161(a6)
	beq.s	RSET68K

	dc.w	$4E7A,$8801	; movec vbr,a0

RSET68K:
	move.l	THNG.VCTR+VCTR.RSET_OLD(a3),$04(a0) ; restore old RSET
	move.l	THNG.VCTR+VCTR.TRP1_OLD(a3),$84(a0) ; restore old TRAP 1

RSETX:
	movem.l	(a7)+,d0/a0/a3/a6

;  Call old RESET routine

RSETJMP:

VCTR.RSET_OLD EQU (RSETJMP-VCTR_BEG)+2

	DC.W	$4EF9,$0000,$0000  ; filled in later

*******************************************************************
*
* Pad out to long words

NOPpad2:
	DCB.w ((0-(NOPpad2-BASE))&$3)/2,$4E71

*******************************************************************
*
* End custom vector routines

VCTR_END:

VCTR.LEN EQU VCTR_END-VCTR_BEG

*******************************************************************

; offset into thing for local variables

THNG.VAR 	EQU	$0

; offset into thing for custom vector routines

THNG.VCTR	EQU	THNG.VAR+VAR.LEN
THNG.HW_VCTR	EQU	THNG.VCTR+VCTR.LEN

*******************************************************************

	END
