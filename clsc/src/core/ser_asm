	INCLUDE	'DEV_ASM_QDOS_DEFINES_inc'
	INCLUDE	'CLSC_SRC_CORE_SER_inc'

	SECTION	SER

	XREF	HW_RESET,HW_ENABLE,HW_DISABLE
	XREF	HW_BAUD
	XREF	POLL_SERver,XINT_SERver

	XREF	HW_VCTR_BEG
	XREF.S	HW_VCTR.LEN

	XREF.L	HARDTAG

; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; SER_asm - serial device driver
;	 - originated July 98 - Mark Swift
;	 - last modified 11/08/99 (MSW)

; Assembly source for implementing a QDOS serial device

VERSTAG	EQU	'1.22'
THNGTAG	EQU	'aSER'

; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;  ROM header

BASE:
	dc.l	$4AFB0001	; ROM recognition code
	dc.w	0
	dc.w	ROM_START-BASE

	dc.b	0,27
	dc.l	HARDTAG
	dc.b	'SER device driver '
	dc.l	VERSTAG
	dc.b	$A,0

; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;  start of ROM code

ROM_START:

; --------------------------------------------------------------
;  enter supervisor mode and disable interrupts

	trap	#0
	ori.w	#$0700,sr	; disable interrupts

; --------------------------------------------------------------
;  save register entry values

	movem.l	d0-d3/d6-d7/a0-a4/a6,-(a7)

; --------------------------------------------------------------
;  initialise hardware

	bsr	HW_RESET

; --------------------------------------------------------------
;  allocate a THING entry for local variables

	move.l	a7,d0
	andi.l	#$FFFF8000,d0
	move.l	d0,a6		; address of system vars

	bsr	MAKE_THG 	; a3 now points to vars
	bne	ROM_EXIT

; --------------------------------------------------------------
;  disable caches on '020 and above

	bsr	CACHOFF		; disable caches
	move.l	d0,d7		; save cacr value

; --------------------------------------------------------------
;  get address of system vectors

	suba.l	a0,a0		; a handy reference point

	tst.b	161(a6)
	beq.s	NOVBR

	dc.w	$4E7A,$8801	; movec vbr,a0 (010+)

NOVBR:

; --------------------------------------------------------------
;  Copy custom vector routines into THING

	move.l	#VCTR.LEN+HW_VCTR.LEN,d2	; will always be multiple of 4
	lsr.w	#2,d2
	subq.w	#1,d2
	lea	VCTR_BEG(pc),a2
	lea	THNG.VCTR(a3),a4

CPY_VCTR:
	move.l	(a2)+,(a4)+
	dbra	d2,CPY_VCTR

; --------------------------------------------------------------
;  Redirect TRAP 1 routine

	move.l	$84(a0),THNG.VCTR+VCTR.TRP1_OLD(a3) ; save old address

	lea	THNG.VCTR+VCTR.TRP1_NEW(a3),a1
	move.l	a1,$84(a0)			; redirect TRAP 1

; --------------------------------------------------------------
;  Redirect RESET routine

	move.l	$04(a0),THNG.VCTR+VCTR.RSET_OLD(a3) ; save old address

	lea	THNG.VCTR+VCTR.RSET_NEW(a3),a1
	move.l	a1,$04(a0)			; redirect RESET

; --------------------------------------------------------------
;  routines necessary for device driver

	lea	SER_IO(pc),a2	; Input/Output routine
	move.l	a2,SV_AIO(a3)

	lea	SER_OPEN(pc),a2	; OPEN routine
	move.l	a2,SV_AOPEN(a3)

	lea	SER_CLOSe(pc),a2	; CLOSE routine
	move.l	a2,SV_ACLOS(a3)

; --------------------------------------------------------------
;  routines necessary for IO.SERIO. (used by SER I/O routine)

	lea	SER_TST(pc),a2	; test for pending input
	move.l	a2,VAR.PEND(a3)

	lea	SER_FBYT(pc),a2	; fetch byte
	move.l	a2,VAR.FBYTE(a3)

	lea	SER_SBYT(pc),a2	; send byte
	move.l	a2,VAR.SBYTE(a3)

	move.w	#$4E75,VAR.RTS(A3) ; RTS instruction at $34

; --------------------------------------------------------------
;  link in device driver

	lea	SV_LIO(a3),a0	; link address
	moveq	#MT.LIOD,d0	; link in IO device driver
	trap	#1

; -------------------------------------------------------------
; link in external interrupt routine

	lea	XINT_SERver(pc),a1 ; address of routine
	lea	SV_LXINT(a3),a0
	move.l	a1,4(a0)
	moveq	#MT.LXINT,d0
	trap	#1

; --------------------------------------------------------------
;  link in poll interrupt to re-enable serial send / receive

	lea	POLL_SERver(pc),a1 ; address of routine
	lea	SV_LPOLL(a3),a0
	move.l	a1,4(a0) 	; address of polled task
	moveq	#MT.LPOLL,d0
	trap	#1

; --------------------------------------------------------------
;  restore caches

	move.l	d7,d0
	bsr	SETCACH

; --------------------------------------------------------------
;  restore register entry values

ROM_EXIT:
	movem.l	(a7)+,d0-d3/d6-d7/a0-a4/a6

;  enable interrupts and re-enter user mode

	andi.w	#$D8FF,sr
	rts

*******************************************************************
*
*  make 'THING' for me
*
*  enter a6 = system variables
*  exit	a3 = address of your private variables
*
*  corrupts = d0,d2,a1 - etc...
*
*  11/08/99 Make the THING but do not add it to the THING list.
*	   We will thus keep it private.

MAKE_THG:
;	 lea	 SV_THINGL(a6),a3  ; start of THING list
;
;NEXT_THG:
;	 move.l	 (a3),d0
;	 beq.s	 ALOC_THG
;
;	 move.l	 d0,a3
;
;	 cmp.w	 #4,$2A(a3)
;	 bne.s	 NEXT_THG
;
;	 cmp.l	 #THNGTAG,$2C(a3)
;	 bne.s	 NEXT_THG
;
;	 bra.s	 OKAY_THG
;
ALOC_THG:
	moveq	#0,d2		; owner is superBASIC
	move.l	#$38+VAR.LEN+VCTR.LEN+HW_VCTR.LEN,d1  ; length
	moveq	#MT.ALCHP,d0
	trap	#1		; allocate space

	tst.l	d0
	bne.s	EXIT_THG 	; exit if error

	move.l	a0,a3

INIT_THG:
	move.l	#VERSTAG,$26(a3)	; version number
	move.w	#4,$2A(a3)	; name length
	move.l	#THNGTAG,$2C(a3)	; name
	move.l	#'THG%',$30(a3)	; thing variables follow
	move.l	#2,$34(a3)	; freeform shared code

	lea	$30(a3),a1	; ptr to thing data area
	move.l	a1,$10(a3)	; store ptr to variables

;	 lea	 SV_THINGL(a6),a1
;	 move.l	 (a1),(a3)	 ; extend thing list
;	 move.l	 a3,(a1) 	 ; put THIS thing at start

OKAY_THG:
	move.l	$10(a3),a3	; address of data area
	addq.l	#8,a3		; return with a3 pointing
				; to first variable

EXIT_THG:
	tst.l	d0
	rts

; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;  Serial open routine

SER_OPEN:
	suba.w	#10,a7		; room for 5 words on
	MOVEA.L	A7,A3		; stack.

	move.w	IO.NAME,a4	; decode device name
	jsr	(a4)

	BRA.S	SER_O_X		; error
	BRA.S	SER_O_X		; error
	BRA.S	SER_O_CHK	; OK, check values

	DC.B	0,3,'SER',0
	dc.w	5		; 5 parameters

	dc.w	-1		; word, no seperator
	dc.w	1		; default port

	dc.w	4		; char value, 4 options
	DC.B	'OEMS'		; Parity

	DC.W	2		; char value, 2 options
	DC.B	'IH'		; handshake

	dc.w	4		; char value, 4 options
	dc.b	'RNCL'		; eol protocol

	dc.w	2		; char value, 2 options
	dc.b	'FZ'		; eof protocol

; --------------------------------------------------------------
SER_O_NF:
	moveq	#ERR.NF,d0	; not found
	bra.s	SER_O_X

; --------------------------------------------------------------
SER_O_IU:
	moveq	#ERR.IU,d0	; in use

; --------------------------------------------------------------
SER_O_X:
	adda.w	#10,a7
	ANDI.W	#$F8FF,SR
	RTS

; --------------------------------------------------------------
SER_O_CHK:
	ORI.W	#$0700,SR	; disable interrupts

	MOVE.W	(A7),D4		; get port
	ble.s	SER_O_NF 	; <=0, bad value

	SUBQ.W	#2,D4
	bgt.s	SER_O_NF 	; >2, bad value

	lea	SV_SER1C(a6),a5	; Receive queue, channel 1
	blt.s	L00B42

	addq.w	#4,a5

L00B42:
	move.l	(a5),d0		; address set?
	BEQ.S	L00B56		; no queue, no chan def blk

	movea.l	d0,a0
	suba.w	#SER_RXQ,a0	; addrs of old chan def blk
	bclr	#7,SER_TXQ(a0)	; output queue empty?
	BNE.S	L00B6A		; yes, so continue
	bra.s	SER_O_IU 	; no, so exit with error

L00B56:
	move.w	#(SER_END+SER_MORE),d1 ; allocate chan def block
	move.w	MM.ALCHP,a4	; for first time
	JSR	(A4)
	bne.s	SER_O_X		; exit if error occured

	moveq	#SER_TXQL,d1	; length of transmit queue
	lea	SER_TXQ(a0),a2	; address of transmit queue
	move.w	IO.QSET,a4	; set up queue (not used
	jsr	(a4)		; before

L00B6A:
	moveq	#SER_RXQL,d1	; length of receive queue
	lea	SER_RXQ(a0),a2	; address of receive queue
	move.w	IO.QSET,a4	; set up queue
	jsr	(a4)

	move.l	a2,(a5)		; Receive queue

	move.l	(a7),SER_CHNO(a0) ; store port number, parity
	move.l	4(a7),SER_TXHS(a0) ; store handshake, protocol
	move.w	8(a7),SER_EOF(a0) ; store EOF protocol

	subq.w	#1,SER_TXHS(a0)	; <=0 ignore, 1 handshake
	subq.w	#2,SER_PROT(a0)	; <0 raw : 0 CR/LF : 1 CR : 2 LF
	subq.w	#1,SER_EOF(a0)	; <0 none : 0 FF : CTRL-Z

; --------------------------------------------------------------
;  any hardware to set up? - hmm...


	move.w	SER_CHNO(a0),d0	; port number
	bsr	HW_ENABLE

; --------------------------------------------------------------
SER_O_OK:
	moveq	#ERR.OK,d0	; signal "no error"
	bra	SER_O_X

; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;  serial close routine

SER_CLOSe:
	tst.b	1+SER_EOF(a0)
	blt.s	SER_C2		; cont if no eof protocol

	beq.s	SER_C1		; branch if FF protocol

	move.w	#26,d1		; else send CTRL-Z
	bra.s	SER_CLUP

SER_C1:
	move.w	#12,d1		; send Form Feed

SER_CLUP:
	bsr	SER_SBOK
	cmp.w	#ERR.NC,d0
	beq.s	SER_CLUP

; --------------------------------------------------------------
;  any hardware to close - hmm...

SER_C2:
	move.w	SER_CHNO(a0),d0	; port number
	bsr	HW_DISABLE

	lea	SER_TXQ(a0),a2
	move.w	IO.QEOF,a4	; put EOF marker in queue
	jsr	(a4)

	moveq	#ERR.OK,d0	; signal "no errors"
	RTS

; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;  Serial - input / output routine

SER_IO:
	pea	VAR.PEND(a3)	; pretend call just before
	move.w	IO.SERIO,a4
	JMP	(A4)

; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;  Serial - test for pending input

SER_TST:
	lea	SER_RXQ(a0),a2   ; pointer to buffer
	move.w	IO.QTEST,a4
	jmp	(a4)

; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;  Serial - Send byte d1

SER_SBYT:
	lea	SER_TXQ(a0),a2

	move.l	d1,d3
	move.w	IO.QTEST,a4
	jsr	(a4)
	move.l	d3,d1

	cmpi.w	#ERR.EF,d0
	beq.s	SER_SB4

	moveq	#ERR.OK,d0

	cmpi.w	#$6,d2
	bge.s	SER_SB5

	moveq	#ERR.NC,d0

SER_SB4:
	rts

SER_SB5:
	move.b	1+SER_TXD(a0),d3	; remember old TX code
	move.b	d1,1+SER_TXD(a0)	; save new TX code

	tst.b	1+SER_PROT(a0)
	blt.s	SER_SBOK 	; branch if no eol protocol

	cmpi.b	#$0A,d1		; Line Feed?
	beq.s	SER_SB1

	cmpi.b	#$0D,d1		; Carriage Return?
	bne.s	SER_SBOK 	; branch if neither

SER_SB1:
	cmpi.b	#$0A,d3		; Line Feed?
	beq.s	SER_SB2

	cmpi.b	#$0D,d3		; Carriage Return?
	bne.s	SER_SB3

SER_SB2:
	cmp.b	d1,d3
	beq.s	SER_SB3

	move.b	#$FF,1+SER_TXD(a0) ; ignore LF in CR/LF couple
	moveq	#ERR.OK,d0
	rts

SER_SB3:
	tst.b	1+SER_PROT(a0)
	beq.s	SER_SB6		; branch if CR/LF protocol

	cmp.b	#2,1+SER_PROT(a0)
	beq.s	SER_SB7		; branch if LF

	moveq	#$0D,d1		; else use CR
	bra.s	SER_SBOK

SER_SB6:
	moveq	#$0D,d1
	bsr.s	SER_SBOK

SER_SB7:
	moveq	#$0A,d1

SER_SBOK:
	tst.b	SV_TRAN(a6)	; key translation present ?
	beq.s	L00BDE		; if not -> L00BDE

SER_SBOK1:
	BSR	TRAKEY_S

	rts

L00BDE:
	move.w	SER_PAR(a0),d0
	MOVE.B	L00BEA(PC,D0.W),D0
	JMP	L00BEA(PC,D0.W)
L00BEA:
	DC.B	WNOPAR-L00BEA
	DC.B	WODD-L00BEA
	DC.B	WEVEN-L00BEA
	DC.B	WBIT7-L00BEA
	DC.B	WBIT8-L00BEA
	DC.B	0

; --------------------------------------------------------------
WBIT7:
	BSET	#7,D1

; --------------------------------------------------------------
WNOPAR:
	lea	SER_TXQ(a0),a2

	move.w	IO.QIN,a4	; put byte d1 into queue a2
	jsr	(a4)
	BRA	L00C74

; --------------------------------------------------------------
WBIT8:
	BCLR	#7,D1
	BRA.S	WNOPAR

; --------------------------------------------------------------
WODD:
	BSR	L00C76
	BCHG	#7,D1
	BRA.S	WNOPAR

; --------------------------------------------------------------
WEVEN:
	bsr.s	L00C76
	BRA.S	WNOPAR

; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;  Serial - fetch byte

SER_FBYT:
	lea	SER_RXQ(a0),a2		; Pointer to buffer

	move.w	IO.QOUT,a4
	jsr	(a4)

	bne.s	L00C74

SER_RDAT:
	MOVE.W	SER_PAR(A0),D3
	MOVE.B	L00C3A(PC,D3.W),D3
	JMP	L00C3A(PC,D3.W)

L00C3A:
	DC.B	RNOPAR-L00C3A
	DC.B	RIMPAR-L00C3A
	DC.B	RPAR-L00C3A
	DC.B	RBIT71-L00C3A
	DC.B	RBIT70-L00C3A
	DC.B	0

; --------------------------------------------------------------
RBIT71:
	BCHG	#7,D1
	BRA.S	RBIT70

; --------------------------------------------------------------
RIMPAR:
	BCHG	#7,D1

; --------------------------------------------------------------
RPAR:
	BSR.S	L00C76

; --------------------------------------------------------------
RBIT70:
	BTST	#7,D1
	BEQ.S	RNOPAR
	MOVEQ	#-13,D0		; XMIT error

; --------------------------------------------------------------
RNOPAR:
	tst.b	SV_TRAN(a6)	; Key translation present ?
	BEQ.S	L00C66
	BSR	TRAKEY_R

L00C66:
	move.b	1+SER_RXD(a0),d3	; remember old RX code
	move.b	d1,1+SER_RXD(a0)	; save new RX code

	tst.b	1+SER_PROT(a0)
	blt.s	L00C74		; branch if no EOL protocol

	cmpi.b	#$0A,d1		; Line Feed?
	beq.s	RNOP1

	cmpi.b	#$0D,d1		; Carriage Return?
	bne.s	L00C74		; branch if neither

RNOP1:
	cmpi.b	#$0A,d3		; Line Feed?
	beq.s	RNOP2

	cmpi.b	#$0D,d3		; Carriage Return?
	bne.s	RNOP3

RNOP2:
	cmp.b	d1,d3
	beq.s	RNOP3

	move.b	#$FF,1+SER_RXD(a0) ; ignore LF in CR/LF couple
	moveq	#ERR.NC,d0
	rts

RNOP3:
	moveq	#$0A,d1		; change to LF

L00C74:
	RTS

; --------------------------------------------------------------
L00C76:
	MOVEQ	#6,D3
	MOVE.B	D1,D4

L00C7A:
	ROR.B	#1,D1
	EOR.B	D1,D4
	DBF	D3,L00C7A
	ROXL.B	#1,D4
	ROXR.B	#1,D1
	RTS

; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;  Translate key d1 for sending

TRAKEY_S:
	MOVEM.L	D1-D3/A1,-(A7)
	MOVEQ	#0,D0
	movea.l	SV_TRTAB(a6),a1	; Pointer to key translation
	MOVE.W	2(A1),D2
	LEA	0(A1,D2.W),A1
	TST.B	D1
	BEQ.S	L0B5D6
	MOVE.B	0(A1,D1.W),D0
	TST.B	D0
	BEQ.S	L0B58E
	MOVE.B	D0,D1
	BRA.S	L0B5D6

L0B58E:
	MOVE.L	D1,D3

	move.w	IO.QTEST,a4
	jsr	(a4)

	MOVE.L	D3,D1
	CMPI.W	#$FFF6,D0
	BEQ.S	L0B5DC
	MOVEQ	#0,D0
	CMPI.W	#$0003,D2
	BGE.S	L0B5AA
	MOVEQ	#-1,D0
	BRA.S	L0B5DC

L0B5AA:
	MOVEA.L	SV_TRTAB(A6),A1	; pointer to key translation
	MOVE.W	4(A1),D2 	; Start of system messages
	LEA	0(A1,D2.W),A1
	MOVE.B	(A1)+,D3

L0B5B8:
	BEQ.S	L0B5DC
	CMP.B	(A1)+,D1
	BEQ.S	L0B5C4
	ADDQ.L	#3,A1
	SUBQ.B	#1,D3
	BRA.S	L0B5B8

L0B5C4:
	MOVE.B	(A1)+,D1
	bsr	L00BDE		; put byte d1 into queue a2
	MOVE.B	(A1)+,D1
	bsr	L00BDE		; put byte d1 into queue a2
	MOVE.B	(A1),D1

L0B5D6:
	bsr	L00BDE		; put byte d1 into queue a2

L0B5DC:
	MOVEM.L	(A7)+,D1-D3/A1
	RTS

; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;  translate key d1 for reading

TRAKEY_R:
	MOVEM.L	D0/D2/A1,-(A7)	; D0-D2/A1 as before can not
				; work correctly
	MOVEA.L	$146(A6),A1	; pointer to key translation
	MOVE.W	2(A1),D2
	LEA	0(A1,D2.W),A1
	MOVE.B	0(A1,D1.W),D0
	TST.B	D0
	BEQ.S	L0B60E
	MOVE.W	D1,D2

L0B5FC:
	MOVE.B	0(A1,D2.W),D0
	CMP.B	D0,D1
	BEQ.S	L0B60C
	ADDQ.B	#1,D2
	CMP.B	D2,D1
	BNE.S	L0B5FC
	BRA.S	L0B60E

L0B60C:
	MOVE.B	D2,D1

L0B60E:
	MOVEM.L	(A7)+,D0/D2/A1	; D0-D2/A1 as before can not
				; work correctly
	RTS

*******************************************************************
*
* routine to disable the instruction & data caches
* Exit:	d0 = previous CACR value
*
CACHOFF:
	move.l	d1,-(a7)

	moveq	#0,d0
	moveq	#-1,d1
	bsr.s	DOCACH

	move.l	(a7)+,d1
	rts

*******************************************************************
*
* routine to set the CACR
* Entry: d0 = value to write to CACR
* Exit:	d0 = previous CACR value
*
SETCACH:
	move.l	d1,-(a7)

	moveq	#-1,d1
	bsr.s	DOCACH

	move.l	(a7)+,d1
	rts

*******************************************************************
*
* routine to alter the state of the CACR
* callable from user or supervisor modes
* Entry: d0 = bits to set
*	d1 = bits to clear/alter
* Exit:	d0 = previous CACR value
*
DOCACH:
	movem.l	d2/a0/a6,-(a7)
	movea.l	a7,a0
	trap	#0
	move.w	sr,-(a7)
	ori.w	#$0700,sr	interrupts off

	subq.l	#2,a0
	cmpa.l	a0,a7
	beq.s	DOCACHSV 	entered routine as supervisor

	bclr	#5,0(a7) 	otherwise sr on exit = user mode

DOCACHSV:
	move.l	a7,d2		Calculate start of
	andi.w	#-$8000,d2	system variables
	move.l	d2,a6

	and.l	d1,d0
	not.l	d1

	cmpi.b	#$10,$A1(a6)
	bls.s	DOCACHX		exit if 010 or less

	dc.w	$4E7A,$2002	movec	cacr,d2
	and.l	d2,d1		mask off changed bits
	or.l	d0,d1		or in set bits

	move.l	d2,d0		store old cacr value

	ori.w	#$0808,d1	always clear caches on 020/030

	cmpi.b	#$30,$A1(a6)
	bls.s	DOCACHSET

	tst.w	d0		check 040 bits
	bpl.s	DOCACHDCHK	branch if instruction cache off
	dc.w	$F4B8		cpusha	ic
				; otherwise update memory from cache

DOCACHDCHK:
	tst.l	d0		check 040 bits
	bpl.s	DOCACHDINV	branch if data cache off
	dc.w	$F478		cpusha	dc
				; otherwise update memory from cache

	tst.l	d1		check 040 bits
	bmi.s	DOCACHIINV	branch if leaving data cache on

DOCACHDINV:
	dc.w	$F458		cinva	dc
				; invalidate cache

DOCACHIINV:
	dc.w	$F498		cinva	ic
				; invalidate cache

DOCACHSET:
	dc.w	$4E7B,$1002	movec	d1,cacr
				; set the cache

DOCACHX:
	move.w	(a7)+,sr
	movem.l	(a7)+,d2/a0/a6
	rts

*******************************************************************
*
* Pad out to long words

NOPpad1:
	DCB.w ((0-(NOPpad1-BASE))&$3)/2,$4E71

*******************************************************************
*
* Begin custom vector routines

VCTR_BEG:

*******************************************************************
*
*  Custom TRAP 1 routine to handle calls to:
*  MT_BAUD (d0=$12)

TRP1:

VCTR.TRP1_NEW EQU TRP1-VCTR_BEG

	cmp.b	#MT.BAUD,d0
	beq.s	MT_BAUD

; --------------------------------------------------------------
;  Call old TRAP #1 routine

TRP1JMP:

VCTR.TRP1_OLD EQU (TRP1JMP-VCTR_BEG)+2

	DC.W	$4EF9,$0000,$0000  ; filled in later

; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; initialise A5 and A6 prior to performing a TRAP routine

INI_A5A6
	SUBQ.L	#8,A7
	MOVE.L	8(A7),-(A7)
	MOVEM.L	D7/A5/A6,4(A7)

	move.l	a7,d7
	andi.l	#$FFFF8000,d7
	move.l	d7,a6		; Calc address of sys vars

	LEA	4(A7),A5 	; A5 points to saved
				; Registers D7,A5,A6
	MOVEQ	#$7F,D7
	AND.L	D7,D0
	RTS

; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;  TRAP #1 with D0=$12

MT_BAUD:
	bsr.s	INI_A5A6
	bsr	HW_BAUD

	moveq	#0,d0		; no errors

; --------------------------------------------------------------
;  exit from TRAP call

TRP1X:
	movem.l	(a7)+,d7/a5/a6	; exit from exception
	rte

*******************************************************************
*
*  Custom RESET routine to put vectors back as they were

RSET:

VCTR.RSET_NEW EQU RSET-VCTR_BEG

	ori.w	#$0700,sr	; disable further interrupts

	bsr	HW_RESET

	movem.l	d0/a0/a3/a6,-(a7)

	lea	VCTR_BEG-THNG.VCTR(pc),a3

	move.l	a7,d0
	andi.l	#$FFFF8000,d0
	move.l	d0,a6		; address of system vars

;  Put back old vectors

	suba.l	a0,a0		; a handy reference point

	tst.b	161(a6)
	beq.s	RSET68K

	dc.w	$4E7A,$8801	; movec vbr,a0

RSET68K:
	move.l	THNG.VCTR+VCTR.RSET_OLD(a3),$04(a0) ; restore old RSET
	move.l	THNG.VCTR+VCTR.TRP1_OLD(a3),$84(a0) ; restore old TRAP 1

RSETX:
	movem.l	(a7)+,d0/a0/a3/a6

;  Call old RESET routine

RSETJMP:

VCTR.RSET_OLD EQU (RSETJMP-VCTR_BEG)+2

	DC.W	$4EF9,$0000,$0000  ; filled in later

*******************************************************************
*
* Pad out to long words

NOPpad2:
	DCB.w ((0-(NOPpad2-BASE))&$3)/2,$4E71

*******************************************************************
*
* End custom vector routines

VCTR_END:

VCTR.LEN EQU VCTR_END-VCTR_BEG

*******************************************************************

; offset into thing for local variables

THNG.VAR 	EQU	$0

; offset into thing for custom vector routines

THNG.VCTR	EQU	THNG.VAR+VAR.LEN
THNG.HW_VCTR	EQU	THNG.VCTR+VCTR.LEN

*******************************************************************

	END
