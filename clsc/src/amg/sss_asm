	INCLUDE	'DEV/ASM/QDOS/DEFINES_inc'
	INCLUDE	'CLSC/SRC/CORE/SSS_inc'
	INCLUDE	'DEV/ASM/AMG/HW_inc'
	INCLUDE	'CLSC/SRC/AMG/CLSC_inc'

	SECTION	SSS

	XDEF	HW_RESET,HW_DISABLE,HW_ENABLE

	XDEF	HW_VCTR_BEG
	XDEF	HW_VCTR.SSSS_HED
	XDEF	HW_VCTR.LVL4_NEW,HW_VCTR.LVL4_OLD
	XDEF	HW_VCTR.LVL6_NEW,HW_VCTR.LVL6_OLD
	XDEF	HW_VCTR.LEN

	XDEF	HARDTAG

*******************************************************************
*
* SSS_asm - Sampled Sound System routines
*	 - originated July 99 - Mark Swift
*	 - last modified 22/08/99 (MSW)
*
*	   DOUBLE-BUFFERED version

BASE:

*******************************************************************
*
* Begin custom vector routines

HW_VCTR_BEG:

*******************************************************************
*
*  Identification tag / pointer to sampled sound functions

HW_SSSS_HED:

HW_VCTR.SSSS_HED	EQU	(HW_SSSS_HED-HW_VCTR_BEG)

	DC.L	'SSSS'
	DC.L	$00000000	; SSSfuncs (filled in later)

*******************************************************************
*
*  LEVEL 4 and 6 INTERRUPT handler

LVL4:

HW_VCTR.LVL4_NEW	EQU	(LVL4-HW_VCTR_BEG)

	movem.l	a0-a5/d0/d3,-(a7)

	ori.w	#$0700,sr	; disable interrupts

	move.w	#%0000000010000000,INTREQ ; clear interrupts

	lea	HW_SSSS_HED(pc),a3

	move.l	SMPL_VARS+SMPL.BUF1,a4
	move.l	SMPL_VARS+SMPL.BUF2,a5

	move.l	BUF.LEN(a4),d0
	bne.s	HW_LVL4A

	bsr	HW_DISABLE	; no samples, so disable sound

HW_LVL4A:

HW_LVL4B:
	exg	a4,a5
	move.l	a4,SMPL_VARS+SMPL.BUF1
	move.l	a5,SMPL_VARS+SMPL.BUF2

	lea	BUF.SMPLL(a4),a1
	lea	BUF.SMPLR(a4),a2

	move.l	HW_VCTR.LEN+VAR.SMPOUT(a3),a0

	move.l	HW_VCTR.LEN+VAR.SMPIN(a3),d0
	sub.l	a0,d0
	blt.s	HW_LVL4C

	sub.l	#BUF_SIZ,d0
	bgt.s	HW_LVL4C

	clr.l	BUF.LEN(a4)
	bra.s	HW_LVL4X 	; and exit

HW_LVL4C:
	move.l	#BUF_SIZ>>1,BUF.LEN(a4)

	move.l	BUF.LEN(a4),d0
	lsr.l	#1,d0
	move.w	d0,AUD0LEN
	move.w	d0,AUD1LEN
	move.l	a1,AUD0LC	; set address sample channel 0
	move.l	a2,AUD1LC	; set address sample channel 1

	move.w	#(BUF_SIZ>>2)-1,d3

HW_LVL4D:
	move.l	(a0)+,d0
	ror.w	#8,d0
	rol.l	#8,d0
	ror.w	#8,d0
	eor.l	#$80808080,d0
	move.w	d0,(a1)+
	swap	d0
	move.w	d0,(a2)+

	dbra	d3,HW_LVL4D

	cmpa.l	HW_VCTR.LEN+VAR.SMPEND(a3),a0
	blt.s	HW_LVL4E

	lea	HW_VCTR.LEN+VAR.SMPQ(a3),a0

HW_LVL4E:
	move.l	a0,HW_VCTR.LEN+VAR.SMPOUT(a3)

HW_LVL4X:
	movem.l	(a7)+,a0-a5/d0/d3
	rte

*******************************************************************

LVL4JMP:

HW_VCTR.LVL4_OLD	EQU	(LVL4JMP-HW_VCTR_BEG)+2

	DC.W	$4EF9,$0000,$0000  ; filled in later

*******************************************************************
*
*  Custom interrupt server for level 6 interrupts

LVL6:

HW_VCTR.LVL6_NEW	EQU	(LVL6-HW_VCTR_BEG)

LVL6JMP:

HW_VCTR.LVL6_OLD	EQU	(LVL6JMP-HW_VCTR_BEG)+2

	DC.W	$4EF9,$0000,$0000  ; filled in later

*******************************************************************
*
*  HARDWARE RESET : initialise hardware for use.

HW_RESET:
	move.l	#SAMPLE1,SMPL_VARS+SMPL.BUF1
	move.l	#SAMPLE2,SMPL_VARS+SMPL.BUF2

*******************************************************************
*
*  HARDWARE DISABLE : disable hardware

HW_DISABLE:
	clr.l	SAMPLE1+BUF.LEN
	clr.l	SAMPLE2+BUF.LEN

	move.w	#%0000000010000000,INTENA ; disable AUD0 ints
	move.w	#$000F,DMACONW	        ; kill sound
	move.w	#%0000000010000000,INTREQ ; clear AUD0 ints
	rts

*******************************************************************
*
* End custom vector routines

NOPpad3:
	DCB.w ((0-(NOPpad3-BASE))&$3)/2,$4E71 ; pad to long word boundary

HW_VCTR_END:

HW_VCTR.LEN	EQU	(HW_VCTR_END-HW_VCTR_BEG)

*******************************************************************
*
*  HARDWARE ENABLE : enable hardware

HW_ENABLE:
	movem.l	d0/a1-a2/a4,-(a7)
	move.w	INTENAR,d0
	btst	#7,d0
	bne.s	HW_ENABLEX

	move.w	#$FF,ADKCON	; no modulation
	move.w	#64,AUD0VOL	; set volume channel 0
	move.w	#64,AUD1VOL	; set volume channel 1
	move.w	#179,AUD0PER	; set sample period channel 0
	move.w	#179,AUD1PER	; set sample period channel 1
				; = 20khz
	move.w	#%0000000010000000,INTREQ ; clear AUD0 ints
	move.w	#%1000000010000000,INTENA ; enable interrupts

	move.l	SMPL_VARS+SMPL.BUF1,a4

	lea	BUF.SMPLL(a4),a1
	lea	BUF.SMPLR(a4),a2
	move.l	BUF.LEN(a4),d0
	bne.s	HW_ENABLE1

	clr.l	(a1)
	clr.l	(a2)
	moveq.l	#4,d0
	move.l	d0,BUF.LEN(a4)	; kickstart the sound interrupts

HW_ENABLE1:
	lsr.l	#1,d0
	move.w	d0,AUD0LEN
	move.w	d0,AUD1LEN
	move.l	a1,AUD0LC
	move.l	a2,AUD1LC

	move.w	#$8003,DMACONW	; enable audio DMA

HW_ENABLEX:
	movem.l	(a7)+,d0/a1-a2/a4
	rts

*******************************************************************
*
* Pad out to long words

NOPpad5:
	DCB.w ((0-(NOPpad5-BASE))&$3)/2,$4E71 ; pad to long word boundary

*******************************************************************

	END
